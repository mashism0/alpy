import os  # –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
from bot.handlers.start import main_menu, back
from bot.handlers.func import send_temp_message, delete_temp_message
import tempfile  # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
import asyncio  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
from concurrent.futures import ThreadPoolExecutor  # –ó–∞–ø—É—Å–∫ –±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –∫–æ–¥–∞ –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤

import cv2  # OpenCV –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ QR-–∫–æ–¥–∞–º–∏
from selenium import webdriver  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–æ–º —á–µ—Ä–µ–∑ Selenium
from selenium.webdriver.chrome.service import Service  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É–∂–±–æ–π chromedriver
from selenium.webdriver.chrome.options import Options  # –û–ø—Ü–∏–∏ –¥–ª—è Chrome
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By  # –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
from selenium.webdriver.support.ui import WebDriverWait  # –û–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
from selenium.webdriver.support import expected_conditions as EC  # –£—Å–ª–æ–≤–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è

from aiogram import Router, F  # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –±–æ—Ç–∞ Aiogram
from aiogram.types import CallbackQuery, Message  # –¢–∏–ø—ã Telegram-—Å–æ–æ–±—â–µ–Ω–∏–π
from aiogram.fsm.context import FSMContext  # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
from aiogram.fsm.state import State, StatesGroup  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
from aiogram.filters.state import StateFilter  # –§–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é


qr_router = Router()  # –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å QR

class QRStates(StatesGroup):
    waiting_for_qr_photo = State()  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ —Å QR-–∫–æ–¥–æ–º

@qr_router.callback_query(F.data == "check_qr")  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å data="check_qr"
async def ask_for_qr_photo(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    await callback.message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ —Å —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞.",
                                  reply_markup=back)  # –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state(QRStates.waiting_for_qr_photo)  # –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ FSM –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
    await callback.answer()  # –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback (—á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏)

@qr_router.message(StateFilter(QRStates.waiting_for_qr_photo), F.photo)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è QR
async def handle_qr_photo(message: Message, state: FSMContext):
    photo = message.photo[-1]  # –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞)
    file_info = await message.bot.get_file(photo.file_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ

    with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmp_file:  # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ñ–æ—Ç–æ
        file_path = tmp_file.name  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        await message.bot.download_file(file_info.file_path, destination=file_path)  # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –≤ —Ñ–∞–π–ª

    try:
        image = cv2.imread(file_path)  # –°—á–∏—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ OpenCV
        if image is None:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
                                 reply_markup=back)  # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å - —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
            return

        detector = cv2.QRCodeDetector()  # –°–æ–∑–¥–∞—ë–º –¥–µ—Ç–µ–∫—Ç–æ—Ä QR-–∫–æ–¥–æ–≤
        qr_data, _, _ = detector.detectAndDecode(image)  # –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º QR-–∫–æ–¥
        if not qr_data:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å QR-–∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.",
                                 reply_markup=back)  # –ï—Å–ª–∏ QR-–∫–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω - —Å–æ–æ–±—â–∞–µ–º
            return

        if not qr_data.startswith("http"):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ QR —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É
            await message.answer("‚ùå QR-–∫–æ–¥ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π.",
                                 reply_markup=back)
            return
        
        if not qr_data.startswith("https://knd.gov.ru/"):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ QR —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É
            await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π QR-–∫–æ–¥. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.",
                                 reply_markup=back)
            return
        await send_temp_message(message.bot, message, "üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ...")  # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞

        info = await fetch_info_selenium(qr_data)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ Selenium

        await delete_temp_message(message.bot, message)
       
        if info:
            routes_text = "\n".join(info["route"][1:])
            hikes_text = "\n".join(info["hike"][1:])
            await message.answer(
                f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω:\n"
                f"üë§ –§–ò–û: {info['full_name']}\n"
                f"üìÑ –°—Ç–∞—Ç—É—Å —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è: {info['status']}\n"
                f"üìç –ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {info['city']}\n"
                f"üìã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—É—Ä–∏—Å—Ç—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã:\n"
                f"{routes_text}\n"
                f"üìã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ—Ö–æ–¥—ã:\n"
                f"{hikes_text}"
            )  # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await state.clear()
            await main_menu(message)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞.")  # –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–∞–π—Ç–∞
            await main_menu(message)
    finally:
        os.remove(file_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Ñ–æ—Ç–æ
        #await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM

def fetch_info_selenium_sync(url: str) -> dict | None:
    options = Options()  # –°–æ–∑–¥–∞—ë–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
    options.headless = True  # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ GUI
    #options.add_argument("--headless") #–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç —Ç–æ –≤—ã–¥–∞—ë—Ç –ø–µ—Ä–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    #options.add_argument('--disable-gpu')  # –û—Ç–∫–ª—é—á–∞–µ–º GPU (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è headless)
    #options.add_argument('--no-sandbox')  # –û—Ç–∫–ª—é—á–∞–µ–º sandbox (–Ω—É–∂–Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö Linux-—Å–µ—Ä–≤–µ—Ä–æ–≤)
    service = Service(ChromeDriverManager().install())  # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞
    driver = webdriver.Chrome(service=service, options=options) # –ó–∞–ø—É—Å–∫–∞–µ–º Chrome —á–µ—Ä–µ–∑ Selenium
    #–ü–æ–ª—É—á–∞–µ–º –§–ò–û
    try:
        driver.get(url)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ URL —Å —Å–∞–π—Ç–∞ –∏–∑ QR-–∫–æ–¥–∞
        wait = WebDriverWait(driver, 10)  # –°–æ–∑–¥–∞—ë–º –æ–∂–∏–¥–∞–Ω–∏–µ –¥–æ 10 —Å–µ–∫—É–Ω–¥
        full_name_elem = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "div.title")))  # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –§–ò–û
        full_name = full_name_elem.text.strip()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –§–ò–û
        #–ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥
        try:
            city_elems = wait.until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, "span.txt-opacity")))
            city = city_elems[-1].text if city_elems else "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        except:
            city = "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        #–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è
        try:
            status_elem = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "span.lbl.center.lbl-g")))
            status = status_elem.text.strip()
        except:
            status = "–°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"  # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–∏—à–µ–º –¥–µ—Ñ–æ–ª—Ç
        #–ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        try:
            parent_hike_block = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, ".chapter.row-item.hike.is-open")))
            hike_block = parent_hike_block.find_elements(By.CSS_SELECTOR, "div.title")
            hikes = []
            for elem in hike_block:
                text = elem.text.strip()
                if text:
                    hikes.append(text)
                else: 
                    "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        except:
            hikes = "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        #–ü–æ–ª—É—á–∞–µ–º –ø–æ—Ö–æ–¥—ã
        try:
            parent_route_block = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, ".chapter.row-item.route.is-open")))
            route_block = parent_route_block.find_elements(By.CSS_SELECTOR, "div.title")        
            routes = []
            for elem in route_block:
                text = elem.text.strip()
                if text:
                    routes.append(text)
                else: 
                    "–ü–æ—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        except:
            hikes = "–ü–æ—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"

        return {"full_name": full_name, "city": city, "status": status, "hike": hikes, "route": routes}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}"
              f"–ü—Ä–æ–±–ª–µ–º–∞ –≤ qr_handler")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ
        return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    finally:
        driver.quit()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä

async def fetch_info_selenium(url: str) -> dict | None:
    loop = asyncio.get_running_loop()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
    with ThreadPoolExecutor() as pool:  # –°–æ–∑–¥–∞—ë–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –≤—ã–∑–æ–≤–∞
        result = await loop.run_in_executor(pool, fetch_info_selenium_sync, url)  # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –ø—É–ª–µ
    return result  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –ø–æ—Ç–æ–∫–∞

