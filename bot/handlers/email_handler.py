import random
import string
import smtplib
from email.mime.text import MIMEText
import os
from dotenv import load_dotenv
from aiogram import Router, F  # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –±–æ—Ç–∞ Aiogram
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext  # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
from aiogram.fsm.state import State, StatesGroup  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
from aiogram.filters.state import StateFilter 
from pydantic import BaseModel, EmailStr, ValidationError
import smtplib
from email.mime.text import MIMEText
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy import select
from sqlalchemy.orm import sessionmaker 
from database.models import Instructor


load_dotenv() 

EMAIL_USERNAME = os.getenv("EMAIL_USERNAME")
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD")

email_router = Router()

email_and_code = {}

class EmailStates(StatesGroup):
    waiting_email = State() 
    waiting_code = State()

class User(BaseModel):
    email: EmailStr

DATABASE_URL = os.getenv("DATABASE_URL") #–ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–¥ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è 
engine = create_async_engine(DATABASE_URL, echo=True) #—Å–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
AsyncSessionLocal = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False) #–°–æ–∑–¥–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ SQLAlchemy, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä asyncpg


@email_router.callback_query(F.data == 'exam')
async def process_check_email(callback:CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n'
                                  '–¢–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑—ã–≤–∞–ª–∏ –≤ –∞–Ω–∫–µ—Ç–µ.')
    await state.set_state(EmailStates.waiting_email)
    await callback.answer()

@email_router.message(StateFilter(EmailStates.waiting_email), F.text)
async def check_email(message: Message, state: FSMContext):
    try:
        user_data = {"email": message.text.strip()}
        user = User(**user_data)
        print(f"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Email –≤–∞–ª–∏–¥–µ–Ω: {user.email}")
        
        AsyncSessionLocal = sessionmaker(engine, expire_on_commit=False, class_=AsyncSession,) #–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–±—Ä–∏–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π

        async with AsyncSessionLocal() as session: #—Å–µ—Å—Å–∏—è –∏–∑ —Ñ–∞–±—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–π –≤ –∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ 
            user1 = await session.execute(select(Instructor).filter_by(email=user.email))#–í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            
        user = user1.scalar_one_or_none() #–ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

        if user:
            await message.answer(f"Email –ø—Ä–∏–Ω—è—Ç: {user.email}")
            code = ''.join(random.choices(string.digits, k=6))# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤
            email_and_code[user.email] = code  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ —Å–ª–æ–≤–∞—Ä—å

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∏—Å—å–º–æ
            msg = MIMEText(f'–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞: {code}')
            msg['Subject'] = '–ö–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
            msg['From'] = EMAIL_USERNAME
            msg['To'] = user.email

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —á–µ—Ä–µ–∑ SMTP (Email)
            try:
                with smtplib.SMTP_SSL('smtp.mail.ru', 465) as server:
                    print(f"{EMAIL_USERNAME}\n"
                        f"{EMAIL_PASSWORD}")
                    server.login(EMAIL_USERNAME, EMAIL_PASSWORD)
                    server.send_message(msg)

                # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é FSM
                await message.answer(f"‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {user.email}. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —á–∞—Ç.")
                await state.set_state(EmailStates.waiting_code)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ FSM –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await state.update_data(email=user.email)

            except Exception as e:
                await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                print(f"–û—à–∏–±–∫–∞: {e}")
                email_and_code.pop(user.email, None)
                await state.clear()
        else:
            await message.answer(f"‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
                                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è email")
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        
    except Exception as e:
        await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        print(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {{'email': '{message.text.strip()}'}} | {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞, –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@email_router.message(EmailStates.waiting_code, F.text)
async def process_code(message: Message, state: FSMContext):
    user_data = await state.get_data()
    email = user_data.get("email")
    code_input = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    if email_and_code.get(email) == code_input:
        await message.answer("üéâ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        email_and_code.pop(email, None)  # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")